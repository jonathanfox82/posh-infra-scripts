<#
.Synopsis
   Create a folder on the file server for staff to exchange information
   Work in progress
.DESCRIPTION
   Create a folder, share and adds AD groups for security access.
   Adds an owner as a member of the "Modify Permission" AD security group.
.EXAMPLE
   Create-Managed-Folder.ps1 -FolderName Finance -Owner "Tony Smith"
    MODIFY VARIABLES BLOCK BELOW TO SUIT
#>

Param
(
    # Name for the folder
    [Parameter(Mandatory=$true)]
    $FolderName,
    [Parameter(Mandatory=$true)]
    [string]$Owner
)
Function Remove-InvalidFileNameChars {
  param(
    [Parameter(Mandatory=$true,
      Position=0,
      ValueFromPipeline=$true,
      ValueFromPipelineByPropertyName=$true)]
    [String]$Name
  )

  $invalidChars = [IO.Path]::GetInvalidFileNameChars() -join ''
  $re = "[{0}]" -f [RegEx]::Escape($invalidChars)
  return ($Name -replace $re)
}

##### PRE CHECK #####
$FolderName = Remove-InvalidFileNameChars($FolderName)

###### VARIABLES BLOCK ######
$RWGroup = "Modify access to $FolderName"
$RGroup = "Read access to $FolderName"
# Name of admin group with full permissions on file servers
$FSAdminsGroup = "File Server Administrators"
#Location in AD where the security groups for file server permissions are stored
$FSSecurityGroupOU = "OU=File Server Permissions,OU=Security Permission Groups,OU=Domain,DC=ghfinancials,DC=co,DC=uk"
# Base folder path to create the folder at (Default is GHF Projects share), use lonix-fs02 as we have to map a drive to this area later with different credentials
$Location = "\\ghfinancials\ghf\Projects"
#############################

# Get nearest DC.
$DC = Get-ADDomainController -Discover -Service "GlobalCatalog"

$FullPath = $location+ "\" +$FolderName

###### START SCRIPT ######
# Check if the Owner is an AD user
try
{
    Write-Host Searching for owner account in Active Directory
    if (-Not ($ADAccount = Get-ADUser -Identity $Owner -ErrorAction Stop))
    {
        Exit
    }
    else {
        Write-Host Found AD user $Owner with UPN $ADAccount.UserPrincipalName
    }
}
catch 
{
    Write-Host Unable to find owner in Active Directory.
    Exit
}

# Check if the folder path already exists
try
{
    if(Test-Path $FullPath -ErrorAction Stop)
    {
        Write-Host This folder $FullPath already exists. Exiting
        Exit
    }
}
catch 
{ 
    Write-Host Unable to check the folders existance at $location Check you have NTFS permissions to this location.
}

try 
{
    # Check if Active Directory Groups already exist
    if (Get-ADGroup -Identity $RGroup -ErrorAction SilentlyContinue) { 
        Write-Host $RGroup already exists in Active Directory. Exiting
        Exit
     }
}
catch
{
}
try
{
    if (Get-ADGroup -Identity $RWGroup -ErrorAction SilentlyContinue) { 
        Write-Host $RWGroup already exists in Active Directory. Exiting
        Exit
     }
}
catch
{
}

# Create Active Directory Groups
try 
{
    New-ADGroup -Name $RGroup -GroupCategory Security -GroupScope DomainLocal -Path $FSSecurityGroupOU -Description "Auto generated by powershell script" 
    Write-Host Created group $RGroup
    New-ADGroup -Name $RWGroup -GroupCategory Security -GroupScope DomainLocal -Path $FSSecurityGroupOU -Description "Auto generated by powershell script" 
    Write-Host Created group $RWGroup
    Get-ADGroup $RWGroup   | Add-ADGroupMember -Members $Owner 
}
catch
{
    Write-Host Error creating group. Check you have permissions to Active Directory.
    Exit
}

# Force DC replication so the new groups are available on all DCs.
# Following will fail without Domain Admin rights
Write-Host Replicating new group through Active Directory

$DomainControllers = Get-ADDomainController -Filter *

ForEach ($DC in $DomainControllers) {
    # Replicate
    Write-Host Start replication on $DC.name
    Invoke-Command -ComputerName $DC   -ScriptBlock {
        & 'C:\Windows\System32\repadmin.exe' /syncall
    }
}
Write-Host Completed replication of Active Directory objects.

# Create Folder and apply NTFS permissions
If (Test-Path -Path $Location) 
{

    Write-Host Using base path $Location
    Write-Host Attempting to create folder $FullPath

    try
    {

        New-Item -Path $FullPath -ItemType Directory -ErrorAction Stop

        Write-Output "Remove Inheritance.."
        Invoke-Command  -ScriptBlock {
            & icacls $FullPath /inheritance:d
        }
         
        # Apply appropriate ACL to folder
        # Rights
        $readOnly = [System.Security.AccessControl.FileSystemRights]"ReadAndExecute"
        $readWrite = [System.Security.AccessControl.FileSystemRights]"Modify"
        # Inheritance
        $inheritanceFlag = [System.Security.AccessControl.InheritanceFlags]"ContainerInherit, ObjectInherit"
        # Propagation
        $propagationFlag = [System.Security.AccessControl.PropagationFlags]::None
        # User
        $userRW = New-Object System.Security.Principal.NTAccount($RWGroup)
        $userR = New-Object System.Security.Principal.NTAccount($RGroup)
        # Type
        $type = [System.Security.AccessControl.AccessControlType]::Allow

        $accessControlEntryDU = New-Object System.Security.AccessControl.FileSystemAccessRule @("Domain Users", $readOnly, $inheritanceFlag, $propagationFlag, $type)
        $accessControlEntryAU = New-Object System.Security.AccessControl.FileSystemAccessRule @("Authenticated Users", $readOnly, $inheritanceFlag, $propagationFlag, $type)
        $accessControlEntryAdmins = New-Object System.Security.AccessControl.FileSystemAccessRule @($FSAdminsGroup, $readOnly, $inheritanceFlag, $propagationFlag, $type)
        $accessControlEntryRW = New-Object System.Security.AccessControl.FileSystemAccessRule @($userRW, $readWrite, $inheritanceFlag, $propagationFlag, $type)
        $accessControlEntryR = New-Object System.Security.AccessControl.FileSystemAccessRule @($userR, $readOnly, $inheritanceFlag, $propagationFlag, $type)

        $objACL = Get-ACL $FullPath 

        $objACL.RemoveAccessRuleAll($accessControlEntryDU)
        $objACL.RemoveAccessRuleAll($accessControlEntryAU)
        $objAcl.AddAccessRule($accessControlEntryAdmins)
        $objACL.AddAccessRule($accessControlEntryRW)
        $objACL.AddAccessRule($accessControlEntryR)

        Write-Host Setting ACL on new folder.
        Set-ACL $FullPath $objACL 
    }
    catch
    {
        Write-Host Unable to create folder at $FullPath. Check you have permissions to create folders at that location
        Exit
    }
}
Else
{
    Write-Host Unable to access $location. Check you have permissions to that area.
    Exit
}